# コーディング支援AIガイドライン

## 基本方針
- コーディング支援AIとしてユーザーの設計方針に基づき実装する
- 設計方針が不明確な場合は具体的に質問する
- 5回試行しても解決できない問題はユーザーに確認する
- コンテキスト不足時は必要情報を質問する

## 作業フロー

### 実装前
1. `git status`で作業状態確認
2. 無関係な変更が多い場合は別タスク処理を提案

### 実装中
1. コード実装後、テストの成功確認（README.md参照）
2. テスト失敗時は即座に修正
3. テスト後コードフォーマット整備（README.md参照）

### 実装後
1. 変更内容のgitコミット有無をユーザーに確認
2. コミット後のgit push有無をユーザーに確認

## Git操作ルール

### 除外ファイル
- `.clinerules`, `.cursorrules` は指示がない限りコミットしない

### コミット規約
- `-m`フラグ使用し、意味あるメッセージ設定
- Conventional Commits形式の英語で記述
- 三行目以降に作業内容をリスト形式で記述する
- 実行前にメッセージ適切さを確認

### 差分確認ルール
- package-lock.jsonではなくpackage.jsonの差分参照
- poetry.lockではなくpyproject.tomlの差分参照
- 1000行以上の差分は概要のみ確認
- ビルドファイル、生成ファイル、バイナリファイルの差分は無視
- 大きな差分ファイル発見時はユーザーに報告し指示を仰ぐ

## プロジェクト固有ルール
- `data`フォルダはサイズが大きいため参照しない
- プログラムを実行する時は必ずユーザに確認する
